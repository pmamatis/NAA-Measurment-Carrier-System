/***********************************************************************************************************************
 * This file was generated by the MCUXpresso Config Tools. Any manual edits made to this file
 * will be overwritten if the respective MCUXpresso Config Tools is used to update this file.
 **********************************************************************************************************************/

#ifndef _PERIPHERALS_H_
#define _PERIPHERALS_H_

/***********************************************************************************************************************
 * Included files
 **********************************************************************************************************************/
#include "fsl_common.h"
#include "fsl_i2c.h"
#include "fsl_i2c_freertos.h"
#include "fsl_reset.h"
#include "fsl_debug_console.h"
#include "fsl_clock.h"
#include "lwip/opt.h"
#include "lwip/tcpip.h"
#include "lwip/netifapi.h"
#include "lwip/sys.h"
#include "lwip/sockets.h"
#include "lwip/api.h"
#include "lwip/dhcp.h"
#include "lwip/icmp.h"
#include "lwip/errno.h"
#include "enet_ethernetif.h"
#include "fsl_enet.h"
#include "fsl_enet_mdio.h"
#include "fsl_phylan8720a.h"
#include "fsl_silicon_id.h"
#include "fsl_rit.h"

#if defined(__cplusplus)
extern "C" {
#endif /* __cplusplus */

/***********************************************************************************************************************
 * Definitions
 **********************************************************************************************************************/
/* Definitions for INIT_Peripherals functional group */
/* INIT_Peripherals defines for FLEXCOMM2 */
/* Definition of peripheral ID */
#define SMBUS_PCIE1_PERIPHERAL ((I2C_Type *)FLEXCOMM2)
/* Definition of the clock source frequency */
#define SMBUS_PCIE1_CLOCK_SOURCE 48000000UL
/* SMBus_PCIe1 interrupt vector ID (number). */
#define SMBUS_PCIE1_FLEXCOMM_IRQN FLEXCOMM2_IRQn
/* INIT_Peripherals defines for FLEXCOMM1 */
/* Definition of peripheral ID */
#define SMBUS_PCIE2_PERIPHERAL ((I2C_Type *)FLEXCOMM1)
/* Definition of the clock source frequency */
#define SMBUS_PCIE2_CLOCK_SOURCE 48000000UL
/* SMBus_PCIe2 interrupt vector ID (number). */
#define SMBUS_PCIE2_FLEXCOMM_IRQN FLEXCOMM1_IRQn

/* Definitions for INIT_Peripherals_DEBBUG functional group */
/* Debug console is initialized in the peripheral tool */
#define BOARD_INIT_DEBUG_CONSOLE_PERIPHERAL 
/* Definition of serial peripheral instance */
#define DEBUGCONSOLE_INSTANCE 0U
/* Definition of serial peripheral type */
#define DEBUGCONSOLE_TYPE kSerialPort_Uart
/* Definition of the Baud rate */
#define DEBUGCONSOLE_BAUDRATE 115200UL
/* Definition of the clock source frequency */
#define DEBUGCONSOLE_CLK_FREQ 12000000UL

/* Definitions for INIT_Periphals_Ethernet functional group */
/* @TEST_ANCHOR */
/* IP address definitions */
#ifndef LWIP_NETIF0_IPADDR0
#define LWIP_NETIF0_IPADDR0 0U
#endif
#ifndef LWIP_NETIF0_IPADDR1
#define LWIP_NETIF0_IPADDR1 0U
#endif
#ifndef LWIP_NETIF0_IPADDR2
#define LWIP_NETIF0_IPADDR2 0U
#endif
#ifndef LWIP_NETIF0_IPADDR3
#define LWIP_NETIF0_IPADDR3 0U
#endif
/* Subnet mask definitions */
#ifndef LWIP_NETIF0_NETMASK0
#define LWIP_NETIF0_NETMASK0 0U
#endif
#ifndef LWIP_NETIF0_NETMASK1
#define LWIP_NETIF0_NETMASK1 0U
#endif
#ifndef LWIP_NETIF0_NETMASK2
#define LWIP_NETIF0_NETMASK2 0U
#endif
#ifndef LWIP_NETIF0_NETMASK3
#define LWIP_NETIF0_NETMASK3 0U
#endif
/* Default gateway definitions */
#ifndef LWIP_NETIF0_GW0
#define LWIP_NETIF0_GW0 0U
#endif
#ifndef LWIP_NETIF0_GW1
#define LWIP_NETIF0_GW1 0U
#endif
#ifndef LWIP_NETIF0_GW2
#define LWIP_NETIF0_GW2 0U
#endif
#ifndef LWIP_NETIF0_GW3
#define LWIP_NETIF0_GW3 0U
#endif
/* PHY address definition */
#ifndef LWIP_NETIF0_PHY_ADDRESS
#define LWIP_NETIF0_PHY_ADDRESS 0x0
#endif
/* PHY options definition */
#define LWIP_NETIF0_PHY_OPS phylan8720a_ops
/* MDIO options definition */
#define LWIP_NETIF0_MDIO_OPS lpc_enet_ops
/* MDIO resource definition */
#define LWIP_NETIF0_MDIO_RESOURCE {ENET, 180000000UL}

/* Definitions for INIT_Peripherals_TImer functional group */
/* INIT_Peripherals_TImer defines for RIT */
/* Definition of peripheral ID. */
#define RIT_PERIPHERAL RIT
/* Definition of the clock source. */
#define RIT_CLOCK_SOURCE kCLOCK_BusClk
/* Definition of the clock source frequency. */
#define RIT_CLK_FREQ 96000000UL
/* Definition of the timer period in number of ticks */
#define RIT_TICKS 96000000UL
/* RIT interrupt vector ID (number). */
#define RIT_IRQN RIT_IRQn
/* RIT interrupt vector priority. */
#define RIT_IRQ_PRIORITY 3
/* RIT interrupt handler identifier. */
#define RIT_IRQHANDLER RIT_IRQHandler

/* Definitions for INIT_Peripherals_I2C_RTOS functional group */
/* INIT_Peripherals_I2C_RTOS defines for FLEXCOMM6 */
/* Definition of peripheral ID */
#define I2C_PCIE1_RTOS_PERIPHERAL ((I2C_Type *)FLEXCOMM6)
/* Definition of the clock source frequency */
#define I2C_PCIE1_RTOS_CLOCK_SOURCE 12000000UL
/* I2C_PCIE1_RTOS interrupt vector ID (number). */
#define I2C_PCIE1_RTOS_FLEXCOMM_IRQN FLEXCOMM6_IRQn
/* INIT_Peripherals_I2C_RTOS defines for FLEXCOMM9 */
/* Definition of peripheral ID */
#define I2C_PCIE2_RTOS_PERIPHERAL ((I2C_Type *)FLEXCOMM9)
/* Definition of the clock source frequency */
#define I2C_PCIE2_RTOS_CLOCK_SOURCE 12000000UL
/* I2C_PCIE2_RTOS interrupt vector ID (number). */
#define I2C_PCIE2_RTOS_FLEXCOMM_IRQN FLEXCOMM9_IRQn
/* INIT_Peripherals_I2C_RTOS defines for FLEXCOMM8 */
/* Definition of peripheral ID */
#define I2C_SUPP_RTOS_PERIPHERAL ((I2C_Type *)FLEXCOMM8)
/* Definition of the clock source frequency */
#define I2C_SUPP_RTOS_CLOCK_SOURCE 48000000UL
/* I2C_SUPP_RTOS interrupt vector ID (number). */
#define I2C_SUPP_RTOS_FLEXCOMM_IRQN FLEXCOMM8_IRQn

/* Definitions for INIT_Peripherals_I2C functional group */
/* INIT_Peripherals_I2C defines for FLEXCOMM6 */
/* Definition of peripheral ID */
#define I2C_PCIE1_PERIPHERAL ((I2C_Type *)FLEXCOMM6)
/* Definition of the clock source frequency */
#define I2C_PCIE1_CLOCK_SOURCE 12000000UL
/* I2C_PCIE1 interrupt vector ID (number). */
#define I2C_PCIE1_FLEXCOMM_IRQN FLEXCOMM6_IRQn
/* Transfer buffer size. */
#define I2C_PCIE1_BUFFER_SIZE 2
/* INIT_Peripherals_I2C defines for FLEXCOMM9 */
/* Definition of peripheral ID */
#define I2C_PCIE2_PERIPHERAL ((I2C_Type *)FLEXCOMM9)
/* Definition of the clock source frequency */
#define I2C_PCIE2_CLOCK_SOURCE 12000000UL
/* I2C_PCIE2 interrupt vector ID (number). */
#define I2C_PCIE2_FLEXCOMM_IRQN FLEXCOMM9_IRQn
/* Transfer buffer size. */
#define I2C_PCIE2_BUFFER_SIZE 2
/* INIT_Peripherals_I2C defines for FLEXCOMM8 */
/* Definition of peripheral ID */
#define I2C_SUPP_PERIPHERAL ((I2C_Type *)FLEXCOMM8)
/* Definition of the clock source frequency */
#define I2C_SUPP_CLOCK_SOURCE 48000000UL
/* I2C_SUPP interrupt vector ID (number). */
#define I2C_SUPP_FLEXCOMM_IRQN FLEXCOMM8_IRQn
/* Transfer buffer size. */
#define I2C_SUPP_BUFFER_SIZE 2

/* Definitions for INIT_Peripherals_I2C_HS functional group */
/* INIT_Peripherals_I2C_HS defines for FLEXCOMM2 */
/* Definition of peripheral ID */
#define I2C_PCIE1_RTOS_HS_PERIPHERAL ((I2C_Type *)FLEXCOMM2)
/* Definition of the clock source frequency */
#define I2C_PCIE1_RTOS_HS_CLOCK_SOURCE 48000000UL
/* I2C_PCIE1_RTOS_HS interrupt vector ID (number). */
#define I2C_PCIE1_RTOS_HS_FLEXCOMM_IRQN FLEXCOMM2_IRQn
/* INIT_Peripherals_I2C_HS defines for FLEXCOMM1 */
/* Definition of peripheral ID */
#define I2C_PCIE2_RTOS_HS_PERIPHERAL ((I2C_Type *)FLEXCOMM1)
/* Definition of the clock source frequency */
#define I2C_PCIE2_RTOS_HS_CLOCK_SOURCE 48000000UL
/* I2C_PCIE2_RTOS_HS interrupt vector ID (number). */
#define I2C_PCIE2_RTOS_HS_FLEXCOMM_IRQN FLEXCOMM1_IRQn

/***********************************************************************************************************************
 * Global variables
 **********************************************************************************************************************/
extern i2c_rtos_handle_t SMBus_PCIe1_rtosHandle;
extern const i2c_master_config_t SMBus_PCIe1_config;
extern i2c_rtos_handle_t SMBus_PCIe2_rtosHandle;
extern const i2c_master_config_t SMBus_PCIe2_config;
/* Network interface structure */
extern struct netif lwIP_netif0;
/* IPv4 adress handle */
extern ip4_addr_t lwIP_netif0_ipaddr;
/* IPv4 netmask handle */
extern ip4_addr_t lwIP_netif0_netmask;
/* IPv4 gateway handle */
extern ip4_addr_t lwIP_netif0_gw;
extern const rit_config_t RIT_config;
extern i2c_rtos_handle_t I2C_PCIE1_RTOS_rtosHandle;
extern const i2c_master_config_t I2C_PCIE1_RTOS_config;
extern i2c_rtos_handle_t I2C_PCIE2_RTOS_rtosHandle;
extern const i2c_master_config_t I2C_PCIE2_RTOS_config;
extern i2c_rtos_handle_t I2C_SUPP_RTOS_rtosHandle;
extern const i2c_master_config_t I2C_SUPP_RTOS_config;
extern const i2c_master_config_t I2C_PCIE1_config;
extern i2c_master_handle_t I2C_PCIE1_handle;
extern uint8_t I2C_PCIE1_buffer[I2C_PCIE1_BUFFER_SIZE];
extern i2c_master_transfer_t I2C_PCIE1_transfer;
extern const i2c_master_config_t I2C_PCIE2_config;
extern i2c_master_handle_t I2C_PCIE2_handle;
extern uint8_t I2C_PCIE2_buffer[I2C_PCIE2_BUFFER_SIZE];
extern i2c_master_transfer_t I2C_PCIE2_transfer;
extern const i2c_master_config_t I2C_SUPP_config;
extern i2c_master_handle_t I2C_SUPP_handle;
extern uint8_t I2C_SUPP_buffer[I2C_SUPP_BUFFER_SIZE];
extern i2c_master_transfer_t I2C_SUPP_transfer;
extern i2c_rtos_handle_t I2C_PCIE1_RTOS_HS_rtosHandle;
extern const i2c_master_config_t I2C_PCIE1_RTOS_HS_config;
extern i2c_rtos_handle_t I2C_PCIE2_RTOS_HS_rtosHandle;
extern const i2c_master_config_t I2C_PCIE2_RTOS_HS_config;

/***********************************************************************************************************************
 * Callback functions
 **********************************************************************************************************************/
/* User init callback function*/
extern void lwIP_interface_init(void);
/* Thread init callback function*/
extern void tcpip_init_done(void *arg);
/* I2C transfer callback function for the I2C_PCIE1 component (init. function INIT_Peripherals_I2C)*/
extern void I2C_PCIE1_clb(I2C_Type *base, i2c_master_handle_t *handle, status_t completionStatus, void *userData);
/* I2C transfer callback function for the I2C_PCIE2 component (init. function INIT_Peripherals_I2C)*/
extern void I2C_PCIE2_clb(I2C_Type *base, i2c_master_handle_t *handle, status_t completionStatus, void *userData);
/* I2C transfer callback function for the I2C_SUPP component (init. function INIT_Peripherals_I2C)*/
extern void I2C_SUPP_clb(I2C_Type *base, i2c_master_handle_t *handle, status_t completionStatus, void *userData);

/***********************************************************************************************************************
 * Initialization functions
 **********************************************************************************************************************/

void INIT_Peripherals(void);

void INIT_Peripherals_DEBBUG(void);

void INIT_Peripherals_PMBus(void);

void INIT_Periphals_Ethernet(void);

void INIT_Peripherals_TImer(void);

void INIT_Peripherals_I2C_RTOS(void);

void INIT_Peripherals_I2C(void);

void INIT_Peripherals_I2C_HS(void);

/***********************************************************************************************************************
 * BOARD_InitBootPeripherals function
 **********************************************************************************************************************/
void BOARD_InitBootPeripherals(void);

#if defined(__cplusplus)
}
#endif

#endif /* _PERIPHERALS_H_ */
